<?xml version="1.0"?>
<doc>
    <assembly>
        <name>Microsoft.OData.Extensions.Client</name>
    </assembly>
    <members>
        <member name="T:Microsoft.OData.Extensions.Client.IODataClientBuilder">
            <summary>
            A builder for configuring named OData V4 client instances returned by factory.
            </summary>
        </member>
        <member name="P:Microsoft.OData.Extensions.Client.IODataClientBuilder.Name">
            <summary>
            Gets the name of the client configured by this builder.
            </summary>
        </member>
        <member name="P:Microsoft.OData.Extensions.Client.IODataClientBuilder.Services">
            <summary>
            Gets the application service collection.
            </summary>
        </member>
        <member name="T:Microsoft.OData.Extensions.Client.ODataClientBuilderExtensions">
            <summary>
            Extension methods for configuring an <see cref="T:Microsoft.OData.Extensions.Client.IODataClientBuilder"/>
            </summary>
        </member>
        <member name="M:Microsoft.OData.Extensions.Client.ODataClientBuilderExtensions.ConfigureODataClient(Microsoft.OData.Extensions.Client.IODataClientBuilder,System.Action{Microsoft.OData.Client.DataServiceContext})">
            <summary>
            Adds a delegate that will be used to configure a named OData proxy.
            </summary>
            <param name="builder">The <see cref="T:Microsoft.Extensions.DependencyInjection.IServiceCollection"/>.</param>
            <param name="configureProxy">A delegate that is used to configure an OData proxy.</param>
            <returns>An <see cref="T:Microsoft.OData.Extensions.Client.IODataClientBuilder"/> that can be used to configure the client.</returns>
        </member>
        <member name="M:Microsoft.OData.Extensions.Client.ODataClientBuilderExtensions.AddODataClientHandler``1(Microsoft.OData.Extensions.Client.IODataClientBuilder)">
            <summary>
            Adds an additional odata client handler from the dependency injection container for a named OData proxy.
            </summary>
            <param name="builder">The <see cref="T:Microsoft.OData.Extensions.Client.IODataClientBuilder"/>.</param>
            <returns>An <see cref="T:Microsoft.OData.Extensions.Client.IODataClientBuilder"/> that can be used to configure the client.</returns>
            <typeparam name="THandler">
            The type of the <see cref="T:Microsoft.OData.Extensions.Client.IODataClientHandler"/>. The handler type needs to be register in the DI container.
            </typeparam>
            <remarks>
            <para>
            The <typeparamref name="THandler"/> will be resolved from a service provider that shares 
            the lifetime of the handler being constructed.
            </para>
            </remarks>
        </member>
        <member name="M:Microsoft.OData.Extensions.Client.ODataClientBuilderExtensions.AddProperty(Microsoft.OData.Extensions.Client.IODataClientBuilder,System.String,System.Object)">
            <summary>
            Adds an additional property and value to be shared with other OData or Http handlers.
            </summary>
            <param name="builder">The <see cref="T:Microsoft.OData.Extensions.Client.IODataClientBuilder"/>.</param>
            <param name="propertyName">The name of the property.</param>
            <param name="propertyValue">The value of the property.</param>
            <returns>An <see cref="T:Microsoft.OData.Extensions.Client.IODataClientBuilder"/> that can be used to configure the client.</returns>
        </member>
        <member name="M:Microsoft.OData.Extensions.Client.ODataClientBuilderExtensions.AddHttpClient(Microsoft.OData.Extensions.Client.IODataClientBuilder)">
            <summary>
            Adds a delegate that will be used to configure the http client for the named OData proxy.
            </summary>
            <param name="builder">The <see cref="T:Microsoft.Extensions.DependencyInjection.IServiceCollection"/>.</param>
            <returns>An <see cref="T:Microsoft.Extensions.DependencyInjection.IHttpClientBuilder"/> that can be used to further configure the http client.</returns>
        </member>
        <member name="M:Microsoft.OData.Extensions.Client.ODataClientBuilderExtensions.AddHttpClient(Microsoft.OData.Extensions.Client.IODataClientBuilder,System.Net.Http.HttpClient)">
            <summary>
            Adds a delegate that uses the http client for the named OData proxy.
            </summary>
            <param name="builder">The <see cref="T:Microsoft.Extensions.DependencyInjection.IServiceCollection"/>.</param>
            <param name="httpClient">The http client to be used for communication.</param>
            <returns>An <see cref="T:Microsoft.OData.Extensions.Client.IODataClientBuilder"/> that can be used to further configure the odata client.</returns>
            <remarks>
            This could be used for in memory testing.
            </remarks>
        </member>
        <member name="T:Microsoft.OData.Extensions.Client.ODataClientServiceCollectionExtensions">
            <summary>
            Client extensions
            </summary>
        </member>
        <member name="M:Microsoft.OData.Extensions.Client.ODataClientServiceCollectionExtensions.AddODataClient(Microsoft.Extensions.DependencyInjection.IServiceCollection)">
            <summary>
            Adds the <see cref="T:Microsoft.OData.Extensions.Client.IODataClientBuilder"/> and related services to the <see cref="T:Microsoft.Extensions.DependencyInjection.IServiceCollection"/> and configures
            the default OData client and underlying <see cref="T:System.Net.Http.HttpClient"/>.
            </summary>
            <param name="services">The <see cref="T:Microsoft.Extensions.DependencyInjection.IServiceCollection"/>.</param>
            <returns>An <see cref="T:Microsoft.OData.Extensions.Client.IODataClientBuilder"/> that can be used to configure the client.</returns>
            <remarks>
            <para>
            <see cref="T:System.Net.Http.HttpClient"/> instances that apply the provided configuration can be retrieved using 
            <see cref="M:System.Net.Http.IHttpClientFactory.CreateClient(System.String)"/> and providing the matching name.
            </para>
            <para>
            Use <see cref="F:Microsoft.OData.Extensions.Client.ODataClientOptions.DefaultName"/> as the default name to configure the default client if name not specified.
            </para>
            </remarks>
        </member>
        <member name="M:Microsoft.OData.Extensions.Client.ODataClientServiceCollectionExtensions.AddODataClient(Microsoft.Extensions.DependencyInjection.IServiceCollection,System.String)">
            <summary>
            Adds the <see cref="T:Microsoft.OData.Extensions.Client.IODataClientBuilder"/> and related services to the <see cref="T:Microsoft.Extensions.DependencyInjection.IServiceCollection"/> and configures
            a named OData client and underlying <see cref="T:System.Net.Http.HttpClient"/>.
            </summary>
            <param name="services">The <see cref="T:Microsoft.Extensions.DependencyInjection.IServiceCollection"/>.</param>
            <param name="name">The logical name of the OData client and <see cref="T:System.Net.Http.HttpClient"/> to configure.</param>
            <returns>An <see cref="T:Microsoft.OData.Extensions.Client.IODataClientBuilder"/> that can be used to configure the client.</returns>
            <remarks>
            <para>
            <see cref="T:System.Net.Http.HttpClient"/> instances that apply the provided configuration can be retrieved using 
            <see cref="M:System.Net.Http.IHttpClientFactory.CreateClient(System.String)"/> and providing the matching name.
            </para>
            <para>
            Use <see cref="F:Microsoft.OData.Extensions.Client.ODataClientOptions.DefaultName"/> as the default name to configure the default client if name not specified.
            </para>
            </remarks>
        </member>
        <member name="M:Microsoft.OData.Extensions.Client.DefaultODataClientActivator.#ctor(Microsoft.Extensions.Logging.ILogger{Microsoft.OData.Extensions.Client.DefaultODataClientActivator})">
            <summary>
            constructor for default OData client activator.
            </summary>
            <param name="logger">The logger</param>
        </member>
        <member name="T:Microsoft.OData.Extensions.Client.DefaultODataClientFactory">
            <summary>
            Factory for Containers to an ODATA v4 service.
            </summary>
            <remarks>
            For containers to ODATA v3 services, a separate factory will be used. The interfaces will be similar
            but it will rely on basic types from the ODATA v3 client package instead of the v4 package.
            </remarks>
        </member>
        <member name="M:Microsoft.OData.Extensions.Client.DefaultODataClientFactory.#ctor(Microsoft.OData.Extensions.Client.IODataClientActivator,Microsoft.Extensions.Logging.ILogger{Microsoft.OData.Extensions.Client.DefaultODataClientFactory},Microsoft.Extensions.Options.IOptionsMonitor{Microsoft.OData.Extensions.Client.ODataClientOptions})">
            <summary>
            constructor for default client factory.
            </summary>
            <param name="activator">The activator</param>
            <param name="logger">The logger</param>
            <param name="options">The options</param>
        </member>
        <member name="M:Microsoft.OData.Extensions.Client.DefaultODataClientFactory.CreateClient``1(System.Uri,System.String)">
            <summary>
            create a connection to an OData service, specifying a named HTTP client
            </summary>
            <typeparam name="T">The client type.</typeparam>
            <param name="serviceRoot">An absolute URI that identifies the root of a data service.</param>
            <param name="name">the logic name of the client to use, including both HttpClient and ODataClient.</param>
            <returns>The client type instance.</returns>
        </member>
        <member name="M:Microsoft.OData.Extensions.Client.DefaultODataClientFactory.OnClientCreated(Microsoft.OData.Extensions.Client.ClientCreatedArgs)">
            <summary>
            call OnProxyCreated for each this.handlers
            </summary>
            <param name="args">ProxyCreatedArgs</param>
        </member>
        <member name="T:Microsoft.OData.Extensions.Client.HttpClientODataClientHandler">
            <summary>
            an OData proxy handler that configures the proxy to use HttpClientFactory 
            </summary>
        </member>
        <member name="T:Microsoft.OData.Extensions.Client.HttpClientRequestMessage">
            <summary>
            HttpClient based implementation of DataServiceClientRequestMessage.
            </summary>
        </member>
        <member name="F:Microsoft.OData.Extensions.Client.HttpClientRequestMessage.contentHeaderNames">
            <summary>
            HttpClient distinguishes "Content" headers from "Request" headers, so we
            need to know which category a header belongs to.
            </summary>
        </member>
        <member name="M:Microsoft.OData.Extensions.Client.HttpClientRequestMessage.#ctor(System.Net.Http.HttpClient,Microsoft.OData.Client.DataServiceClientRequestMessageArgs,Microsoft.OData.Client.DataServiceClientConfigurations)">
            <summary>
            Constructor for HttpClientRequestMessage.
            </summary>
            <param name="client">The client</param>
            <param name="args">The args</param>
            <param name="config">The config</param>
        </member>
        <member name="P:Microsoft.OData.Extensions.Client.HttpClientRequestMessage.Headers">
            <summary>
            Returns the collection of request headers.
            </summary>
        </member>
        <member name="P:Microsoft.OData.Extensions.Client.HttpClientRequestMessage.Url">
            <summary>
            Gets or sets the request url.
            </summary>
        </member>
        <member name="P:Microsoft.OData.Extensions.Client.HttpClientRequestMessage.Method">
            <summary>
            Gets or sets the method for this request.
            </summary>
        </member>
        <member name="P:Microsoft.OData.Extensions.Client.HttpClientRequestMessage.Credentials">
            <summary>
             Gets or set the credentials for this request.
            </summary>
        </member>
        <member name="M:Microsoft.OData.Extensions.Client.HttpClientRequestMessage.GetHeader(System.String)">
            <summary>
            Returns the value of the header with the given name.
            </summary>
            <param name="headerName">Name of the header.</param>
            <returns>Returns the value of the header with the given name.</returns>
        </member>
        <member name="M:Microsoft.OData.Extensions.Client.HttpClientRequestMessage.SetHeader(System.String,System.String)">
            <summary>
            Sets the value of the header with the given name.
            </summary>
            <param name="headerName">Name of the header.</param>
            <param name="headerValue">Value of the header.</param>
        </member>
        <member name="M:Microsoft.OData.Extensions.Client.HttpClientRequestMessage.GetStream">
            <summary>
            Gets the stream to be used to write the request payload.
            </summary>
            <returns>Stream to which the request payload needs to be written.</returns>
        </member>
        <member name="M:Microsoft.OData.Extensions.Client.HttpClientRequestMessage.Abort">
            <summary>
            Abort the current request.
            </summary>
        </member>
        <member name="M:Microsoft.OData.Extensions.Client.HttpClientRequestMessage.BeginGetRequestStream(System.AsyncCallback,System.Object)">
            <summary>
            Begins an asynchronous request for a System.IO.Stream object to use to write data.
            </summary>
            <param name="callback">The System.AsyncCallback delegate.</param>
            <param name="state">The state object for this request.</param>
            <returns>An System.IAsyncResult that references the asynchronous request.</returns>
        </member>
        <member name="M:Microsoft.OData.Extensions.Client.HttpClientRequestMessage.EndGetRequestStream(System.IAsyncResult)">
            <summary>
            Ends an asynchronous request for a System.IO.Stream object to use to write data.
            </summary>
            <param name="asyncResult">The pending request for a stream.</param>
            <returns>A System.IO.Stream to use to write request data.</returns>
        </member>
        <member name="M:Microsoft.OData.Extensions.Client.HttpClientRequestMessage.BeginGetResponse(System.AsyncCallback,System.Object)">
            <summary>
            Begins an asynchronous request to an Internet resource.
            </summary>
            <param name="callback">The System.AsyncCallback delegate.</param>
            <param name="state">The state object for this request</param>
            <returns>An System.IAsyncResult that references the asynchronous request for a response.</returns>
        </member>
        <member name="M:Microsoft.OData.Extensions.Client.HttpClientRequestMessage.EndGetResponse(System.IAsyncResult)">
            <summary>
            Ends an asynchronous request to an Internet resource.
            </summary>
            <param name="asyncResult">The pending request for a response.</param>
            <returns> A System.Net.WebResponse that contains the response from the Internet resource.</returns>
        </member>
        <member name="M:Microsoft.OData.Extensions.Client.HttpClientRequestMessage.Dispose">
            <summary>
            Dispose the object.
            </summary>
        </member>
        <member name="T:Microsoft.OData.Extensions.Client.TaskExtensionMethods">
            <summary>
            Extension methods for working with Tasks
            </summary>
        </member>
        <member name="M:Microsoft.OData.Extensions.Client.TaskExtensionMethods.ToApm``1(System.Threading.Tasks.Task{``0},System.AsyncCallback,System.Object)">
            <summary>
            Adapts a Task to the APM pattern.
            </summary>
            <typeparam name="TResult">The result type of the task.</typeparam>
            <param name="task">The Task to adapt.</param>
            <param name="callback">The APM callback to inject.</param>
            <param name="state">The APM state to inject.</param>
            <returns>A Task that has been adapted to use the APM pattern.</returns>
            <remarks>Taken from http://blogs.msdn.com/b/pfxteam/archive/2011/06/27/10179452.aspx </remarks>
        </member>
        <member name="T:AssemblyRef">
            <summary>
            Sets public key string for friend assemblies.
            </summary>
        </member>
        <member name="F:AssemblyRef.ProductPublicKey">
            <summary>ProductPublicKey is an official MS supported public key for external releases.</summary>
        </member>
        <member name="F:AssemblyRef.TestPublicKey">
            <summary>TestPublicKey is an unsupported strong key for testing purpose only.</summary>
        </member>
        <member name="F:AssemblyRef.ProductPublicKeyToken">
            <summary>Product public key token.</summary>
        </member>
    </members>
</doc>
